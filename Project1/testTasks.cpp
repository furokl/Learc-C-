#ifdef Итоговый тест №1

* 'Задание 1'
* Напишите однофайловую программу(с именем main.cpp), которая запрашивает у
* пользователя два целых числа, складывает их, а затем выводит результат.В
* программе должно быть 3 функции:
*1. функция readNumber(), которая запрашивает у пользователя целое число, а
* затем возвращает его в main();
*2. функция writeAnswer(), которая выводит результат на экран.Функция должна
* быть без возвращаемого значения и иметь только один параметр;
*3. функция main(), которая соединяет всё и вся.
*
* 'Задание 2'
* Измените программу из задания №1 так, чтобы функции readNumber() и
* writeAnswer() находились в отдельном файле io.cpp.Используйте предварительные
* объявления для доступа к этим функциям с функции main().
*
* 'Задание 3'
* Измените программу из задания №2 так, чтобы она использовала заголовочный
* файл io.h для доступа к функциям(вместо использования предварительных
	* объявлений).Убедитесь, что ваш заголовочный файл использует header guards.
	*
	*
	* 'Решение:'
	* смотреть "io.h", "io.cpp"
	*
	*#include "io.h"
	*
	*int main() {
	*int a = readNumber();
	*int b = readNumber();
	*writeAnswer(a + b);
	*
}

#endif // Итоговый тест №1

#ifdef Итоговый тест №2

* 'Задание 1'
* Напишите следующую программу.Сначала пользователю предлагается ввести 2
* числа типа с плавающей точкой(используйте тип double).Затем предлагается ввести
* один из следующих математических символов : +, -, * или / .Программа выполняет
* выбранную пользователем математическую операцию между двумя числами, а
* затем выводит результат на экран.Если пользователь ввел некорректный символ,
* то программа ничего не должна выводить. Например :
* Enter a double value : 7
* Enter a double value : 5
* Enter one of the following : +, -, *, or / : *
*	7 * 5 = 35

* #include <iostream>
*
* double getDouble() {
*	double value;
*	std::cout << "Enter a double value: ";
*	std::cin >> value;
*
*	return value;
* }
*
* char getOperator() {
*	char value;
*	std::cout << "Enter one of the following: +, -, *, /" << '\t';
*	std::cin >> value;
*
*	return value;
* }
*
* void printResult(double a, double b, char op) {
*	if (op == '+')
*		std::cout << a << ' ' << op << ' ' << b << " = " << a + b << std::endl;
*	else if (op == '-')
*		std::cout << a << ' ' << op << ' ' << b << " = " << a - b << std::endl;
*	else if (op == '*')
*		std::cout << a << ' ' << op << ' ' << b << " = " << a * b << std::endl;
*	else if (op == '/')
*		std::cout << a << ' ' << op << ' ' << b << " = " << a / b << std::endl;
* }
*
* int main() {
*	double a = getDouble();
*	double b = getDouble();
*	char op = getOperator();
*	printResult(a, b, op);
* }
*
*
*'Задание 2'
* Напишите небольшую программу - симулятор падения мячика с башни.
* Сначала пользователю предлагается ввести высоту башни в метрах.
* Не забывайте о гравитации(9, 8м / с2) и о том, что у мячика нет начальной скорости
* (его держат в руках).Программа должна выводить расстояние от земли, на котором
* находится мячик после 0, 1, 2, 3, 4 и 5 секунд падения.Минимальная высота
* составляет 0 метров(ниже мячику падать нельзя).
*
* #include <iostream>
*
* float getHeight() {
*	float value;
*	std::cout << "Enter a height: ";
*	std::cin >> value;
*
*	return value;
* }
*
* namespace constants {
*	const float g{ 9.8f };
* }
*
* void printResult(const float h, const int t) {
*	float result = h - constants::g * t * t / 2;
*	if (result < 0) result = 0;
*	std::cout << "At " << t << " seconds, the ball is at height: " << result << " meters" << std::endl;
* }
*
* int main() {
*	const float height = getHeight();
*	printResult(height, 0);
*	printResult(height, 1);
*	printResult(height, 2);
*	printResult(height, 3);
*	printResult(height, 4);
*	printResult(height, 5);
* }

#endif // Итоговый тест №2

#ifdef Итоговый тест №4

* 'Задание 1.'
* При разработке игры мы решили, что в ней должны быть монстры, потому что всем
* нравится сражаться с монстрами.Объявите структуру, которая представляет вашего
* монстра.Монстр может быть разным : ogre, goblin, skeleton, orc и troll.Если
* ваш компилятор поддерживает C++11, то используйте классы enum, если нет —
* обычные перечисления.
*
* Каждый монстр также должен иметь имя(используйте std::string) и количество
* здоровья, которое отображает, сколько урона он может получить, прежде чем
* умрет.Напишите функцию printMonster(), которая выведет все члены структуры.
* Объявите монстров типа goblin и orc, инициализируйте их, используя список
* инициализаторов, и передайте в функцию printMonster().
*
* Пример результата выполнения вашей программы:
* This Goblin is named Johnand has 170 health.
* This Orc is named James and has 35 health.
*
*'Решение:'
* смотреть "monster.h", "monster.cpp"
*
* #include "monster.h"
*
* int main() {
* Monster monster_A{ "John", 170, 5, MonsterType::GOBLIN };
* Monster monster_B{ "James", 35, 25, MonsterType::ORC };
*
* printMonster(monster_A);
* printMonster(monster_B);
*
}

#endif // Итоговый тест №4

#ifdef Итоговый тест №5

* 'Задание 1'
* В итоговом тесте главы №2 мы написали программу имитации мячика, падающего с
*	башни. Так как тогда мы еще ничего не знали о циклах и не умели их использовать,
*	то время полета мячика составляло всего лишь 5 секунд.
*	Измените программу, приведенную ниже, таким образом, чтобы мячик падал
*	ровно то количество секунд, которое необходимо ему для достижения земли.
*
*	см. tower.cpp и tower.h
*	#include <iostream>
*	#include "tower.h"
*
*	int main() {
*		const float height = getHeight();
*		printResult(height);
*	}
*
* 'Задание 2'
* Напишите программу-игру типа Hi-Lo:
*	1. Ваша программа должна выбрать случайное целое число в диапазоне от 1 до 100.
*	2. Пользователю дается 7 попыток, чтобы угадать это число.
*	3. Если пользователь не угадал число, то программа должна подсказывать,
*		была ли его догадка слишком большой или слишком маленькой.
*	4. Если пользователь угадал число, то программа должна сообщить, что всё
*		верно — вы выиграли.
*	5. Если же у пользователя кончились попытки, и он не угадал число, то
*		программа должна сообщить ему, что он проиграл и показать правильный
*		результат.
*	6. В конце игры программа должна спросить у пользователя, не хочет ли он
*		сыграть еще раз. Если пользователь не введет ни y, ни n (а что-то другое), то
*		программа должна спросить его еще раз.
*
*	см. hi_lo.h, hi-lo.cpp, constants.h
*	#include "hi_lo.h"
*	#include <cstdlib>
*
*	int main() {
*		srand(0);
*		printStartGameMessage();
*		do
*		{
*			play();
*		} while (restartGame());
*		printEndGameMessage();
*	}

#endif // Итоговый тест №5