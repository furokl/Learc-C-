#include <iostream>

#ifdef Введение в программирование

* @.'Программа' -это 'набор инструкций', которые указывают компьютеру, что ему нужно делать.
* @.'Железо' - физическая часть, выполняющая эти инструкции.
* @.'Машинный код' - ограниченный набор инструкций, которое изначально понимает процессор.
*	1. Каждая команда состоит из определенной последовательности 0 и 1 (биты / двоичный код)
*	2. Каждый набор бит переводится процессором в инструкции для выполнения определенного задания (например, сравнить два числа)
*	Пример: 10110000 01100001
* @.'Язык Ассемблера' - первый ЯП, в котором каждая команда идентифицируется коротким именем.
*	1. Преимущество: производительность
*	2. Недостаток: программирование адаптируется к конкретному процессору.
*	Пример: mov al, 061h
* @.'Высокоуровневые ЯП' - позволяют писать и выполнять программы, не переживая о совместимости кода с разными архитектурами процессоров.
*	Программы, написанные на них также должны быть переведены в машинный код перед выполнением.
*	Есть два варианта это сделать:
*		1. Компиляция
*		2. Интерпретация
* @.'Компилятор' - программа, которая читает код и 'создает' автономную 'исполняемую программу', которую процессор понимает напрямую.
*	1. Преимущество: при повторном запуске программы компиляция не выполняется.
*	Пример: 
*		Код ЯП				->	Компилятор		->	Исполняемый файл
*		Исполняемый файл	->	Процессор		->	Результат программы
*		(C, C++, Pascal)
* @.'Интерпретатор' - программа, которая 'напрямую выполняет код', без его предыдущей компляции в исполняемый файл.
*	1. Преимущество: гибкость
*	2. Недостаток: процесс интерпретации выполняется повторно при каждом запуске программы
*	Пример: 
*		Код ЯП				->	Интерпретатор	->	Процессор	->	Результат программы
*		(Perl, JavaScript)
*	(*Java может как компилироваться, так и интерпретироваться)

#endif // !Введение в программирование

#ifdef Введение в ЯП С и С++

* @.'Язык С "Си"
* Разработан в 1972 г. Деннисом Ритчи, как язык для ОС.
*	Цель: минималистичный язык, который предоставлял бы эффективный доступ к памяти, с относительно быстрым выполнением
*	Стандарты:
*		ANSI 	C89
*		ISO		C90
*		ANSI	C99
* @.'Язык С++
* Разработан в 1979 г. Бьёрном Страуструпом в качестве дополнения к Си.
*	Особенность: введение ООП
*	Стандарты:
*		ISO 1998
*		C++03
*		C++11 (* каждые 3 года)
*		C++14
*		C++17
*		C++20
* @.'Философия
* Можно определить выражением "Доверять программисту"
*	Компилятор не будет мешать сделать что-то новое, что имеет смысл,
*		но также не будет мешать сделать что-то такое, что может привести к сбою программы.

#endif // Введение в языки программирования С и С++


int main() {
	std::cout << "Hello World!";

	return EXIT_SUCCESS;
}