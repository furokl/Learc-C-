#include <iostream>

/*
* Created by Logunov on 22/12/2022
* @comment: Прохождение и конспектирование курса "Ravesli"
* Спец. символы
*	Теория		-	@.'
*	Советы		-	#.'
*	Правила		-	!.'
*/

#ifdef Введение в программирование

* @.'Программа' -это 'набор инструкций', которые указывают компьютеру, что ему нужно делать.
*
* @.'Железо' - физическая часть, выполняющая эти инструкции.
*
* @.'Машинный код' - ограниченный набор инструкций, которое изначально понимает процессор.
*	1. Каждая команда состоит из определенной последовательности 0 и 1 (биты / двоичный код)
*	2. Каждый набор бит переводится процессором в инструкции для выполнения определенного задания (например, сравнить два числа)
*	Пример: 10110000 01100001
*
* @.'Язык Ассемблера' - первый ЯП, в котором каждая команда идентифицируется коротким именем.
*	1. Преимущество: производительность
*	2. Недостаток: программирование адаптируется к конкретному процессору.
*	Пример: mov al, 061h
*
* @.'Высокоуровневые ЯП' - позволяют писать и выполнять программы, не переживая о совместимости кода с разными архитектурами процессоров.
*	Программы, написанные на них также должны быть переведены в машинный код перед выполнением.
*	Есть два варианта это сделать:
*		1. Компиляция
*		2. Интерпретация
*
* @.'Компилятор' - программа, которая читает код и 'создает' автономную 'исполняемую программу', которую процессор понимает напрямую.
*	1. Преимущество: при повторном запуске программы компиляция не выполняется.
*	Пример: 
*		'Код ЯП				->	Компилятор		->	Исполняемый файл'
*		'Исполняемый файл	->	Процессор		->	Результат программы'
*		(C, C++, Pascal)
*
* @.'Интерпретатор' - программа, которая 'напрямую выполняет код', без его предыдущей компляции в исполняемый файл.
*	1. Преимущество: гибкость
*	2. Недостаток: процесс интерпретации выполняется повторно при каждом запуске программы
*	Пример: 
*		'Код ЯП				->	Интерпретатор	->	Процессор	->	Результат программы'
*		(Perl, JavaScript)
*	(*Java может как компилироваться, так и интерпретироваться)

#endif // Введение в программирование

#ifdef Введение в ЯП С и С++

* @.'Язык С "Си"'
* Разработан в 1972 г. Деннисом Ритчи, как язык для ОС.
*	Цель: минималистичный язык, который предоставлял бы эффективный доступ к памяти, с относительно быстрым выполнением
*	Стандарты:
*		ANSI 	C89
*		ISO		C90
*		ANSI	C99
*
* @.'Язык С++'
* Разработан в 1979 г. Бьёрном Страуструпом в качестве дополнения к Си.
*	Особенность: введение ООП
*	Стандарты:
*		ISO 1998
*		C++03
*		C++11 (* каждые 3 года)
*		C++14
*		C++17
*		C++20
*
* @.'Философия'
* Можно определить выражением "Доверять программисту"
*	Компилятор не будет мешать сделать что-то новое, что имеет смысл,
*		но также не будет мешать сделать что-то такое, что может привести к сбою программы.

#endif // Введение в языки программирования С и С++

#ifdef Введение в разработку ПО

* @.'Схема разработки ПО'
*
*	1.'Определите проблему'
*		Это шаг "Что?"
*		Необходимо понять, что вы хотите, чтобы ваша программа делала
*
*	2.'Разработайте решение'
*		Вопрос "Как?"
*		Каким образом можно решить проблему;
*			довольно часто пренебрегают, способов решения задачи может быть много,
*			только часть из них - хорошие, а часть - плохие
*		Как правило, хорошие решения обладают следующими характеристиками
*			'Простота'
*			'Хорошая документация'
*			'Модульный принцип' (может быть повторна использована, изменена позже)
*			'Надежность' (проверка на ошибки)
*
*	3.'Напишите программу, используя решение'
*
*	4.'Скомпилируйте программу'
*		@.'Работа компилятора' состоит из двух частей:
*			Проверка программы на соответствие правилам языка С++ (проверка синтаксиса)
*			Конвертация каждого исходного файла (*.cpp) с кодом в объектный файл на машинном языке
*
*	5.'Соедините объектные файлы (Линкинг)'
*		@.'Линкинг' - процесс связывания всех объектных файлов, генерируемых компилятором, в единую исполняемую программу.
*		Это делается при помощи программы Линкер / Компоновщик
*		'Исполняемый файл	->	Компиляция	->	Объектный файл	->	 Линкер	->	Исполняемый файл'
*
*	6.'Протестируйте и отладьте программу'
*		При помощи встроенного отладчика; также IDE имеет ряд возможностей:
*			Комплексная помощь
*			Дополнение кода
*			Система контроля версий

#endif // Введение в разработку ПО

#ifdef Режимы конфигурации Debug и Release

* @.'Конфигурация сборки' - это 'набор настроек' проекта, которые определяют принцип его построения.
*	Состоит из:
*		Имени исполняемого файла
*		Имени директории исполняемого файла
*		Имен директорий, в которых IDE будет искать другой код и файлы библиотек
*		Информации об отладке и параметрах оптимизации вашего проекта
* 
* @.'Debug' - предназначен для отладки программы.
*	Отключает все настройки по оптимизации
*	Включает информацию об отладке
* 
* @.'Release' - используется во время сборки программы для её дальнейшего выпуска
*	Оптимизируется по размеру и производительности
*	Не содержит дополнительную информацию об отладке

#endif // Режимы конфигурации Debug и Release

#ifdef Конфигурация компилятора

* Настроим проект Visual Studio для обучения
* Обозреватель решений	
*	->	Свойства (* установить 'Все конфигурации')
*		->	C/C++	
*			->	Общие	
*				->	'Уровень предупреждения 4'
*			->	Язык	
*				->	'Стандарт языка С++ (С++20?)'
*				->	'Отключить расширения языка Да'

#endif // Конфигурация компилятора

#ifdef Структура программ

* @.'Стейтмент' - распространенный тип инструкций, 'наименьшая независимая единица' в языке С++.
* Пример
*	// Стейтмент объявления
*	int x;
*	// Стейтмент присваивания
*	x = 5;
*	// Стейтмент вывода
*	std::cout << x;
* 
* @.'Выражение' - это математический объект, который создается для проведения вычисления и нахождения результата.
* Пример
*	2 + 3
*	2 + x
*	x + y
*	(2 + x) * (y - 3)
* 
* @.'Функция' - это последовательность стейтментов для выполнения определенного задания.
*	Каждая программа в С++ должна содержать главную функцию main(),
*		именно с первого стейтмента, находящегося в функции main() начинается выполнение всей программы.
* Пример
*	Функция max() может содержать стейтменты, для определения наибольшего из заданных чисел.
* 
* #.'Совет'
*	Размещайте функцию main() в файле .cpp с именем, совпадающим с именем проекта
* 
* @.'Библиотека' - это 'набор скомпилированного кода', который был 'упакован' 
*		для повторного использования в других программах
* Пример
*	#include <iostream>
* 
* @.'Пример простой программы'
*	1.	#include <iostream>
*	2.	
*	3.	int main()
*	4.	{
*	5.		std::cout << "Hello, world!";
*	6.		return 0;
*	7.	}
*	
*	Строка №1: 
*		@.'Директива препроцессора' - сообщает компилятору, что ему нужно выполнить определенное задание,
*			в данном случае подключить содержимое файла <iostream>
*
*	Строка №2:
*		Пустое пространство, игнорируется компилятором
*
*	Строка №3:
*		Объявление главной функции main()
*
*	Строка №4 и №7:
*		Указываем компилятору область видимости функции main()
*
*	Строка №5:
*		Стейтмент вывода.
*			std::cout - это специальный объект, используя который мы можем выводить данные на экран
*			<< - это оператор вывода
*			Всё, что отправляется в std::cout - выводится на экран ("Hello, world!")
*
*	Строка №6:
*		Оператор возврата 'return'
*		@.'Код состояния' - когда программа завершает свое выполнение, функция main() передает обратно в ОС
*			значение, которое указывает на результат выполнения программы
*				0 - всё хорошо
*				иначе - что-то пошло не так

#endif // Структура программ

#ifdef Комментарии

* @.'Комментарий' - Это строка/строки текста, вставленные в исходный код,
*		для объяснения того, что этот код делает.
* 
* 'Однострочный комментарий'	-	//
*	Лучше размещать над строками кода
*	Пример
*		// cout и endl находятся в библиотеке iostream
*		std::cout << «Hello, world!» << std::endl;
* 
* 'Многострочный комментарий'	-	/* */
*	Пример
*		/*
*		* Звёздочки слева
*		* упрощают чтение текста
*		*/
*
*		/* Это многострочный комментарий /* */ а это уже не комментарий */
*
* !.'Правило' - Не используйте вложенные комментарии!
* 
* @.'Как правильно писать комментарии?'
*	1. На уровне библиотек/программ/функций комментарии отвечают на вопрос
*		'Что?'
*	Пример
*		// Эта функция использует метод Ньютона для вычисления корня функции
* 
*	2. Внутри библиотек/программ/функций комментарии отвечают на вопрос
*		'Как?'
*	Пример
*		// Чтобы получить рандомный (случайный) элемент, мы выполняем следующее:
* 
*		// 1) Составляем список всех элементов.
*		// 2) Вычисляем среднее значение для каждого элемента, исходя из его веса, цвета и цены.
*		// 3) Выбираем любое число.
*		// 4) Определяем соответствие элемента случайно выбранному числу.
*		// 5) Возвращаем случайный элемент.
* 
*	3. На уровне стейтментов комментарии отвечают на вопрос
*		'Почему?'
*	Пример
*		// Мы решили использовать список вместо массива,
*		// потому что массивы осуществляют медленную вставку.
* 
* @.'Закомментировать код' - корвертировать одну или несколько строк кода в комментарии.
*	Таким образом, исключаем часть кода из компиляции.
*	В Visual Studio 'быстрые клавиши'
*		Закомментировать	-	'Ctrl + K' потом 'Ctrl + C'
*		Раскомментировать	-	'Ctrl + K' потом 'Ctrl + U'
*
* Причины закомментировать код:
*	1. Вы работаете над новой частью кода, которая пока что не рабочая.
*	2. Вы написали код, который компилируется, но работает не так, как нужно
*		и сейчас у вас нет времени с этим возиться.
*	3. Поиск корня ошибки, поочередно отключая части вашего кода.

#endif // Комментарии

#ifdef Объект

* @.'Объект' - это 'часть памяти', которая может хранить значение.
* При создании объекта, часть оперативной памяти выделяется для этого объекта.
* Аналогия
*	Почтовый ящик, куда мы помещаем информацию и откуда ее извлекаем
* 
* @.'Переменная' - Объект с именем.
* Стейтмент a = 8;
*	где 'а' - это переменная.
* 
* Все переменные являются l-values & r-values 
* 'l-values' - значение, которое 'имеет' свой собственный 'адрес' в памяти 
* 'r-values' - значение, 'не имеющего' постоянного 'адреса' в памяти
* (подробнее в следующих уроках)
* 
* Часто путают Инициализацию и Присваивание (?)
* 'Присваивание'
*	int a;
*	a = 8;
* 'Инициализация'
*	int a = 8
* 
* !.'Правило' - Если у вас изначально 'имеется значение' для переменной, то
*	'используйте инициализацию', вместо присваивания
* 
* При объявлении переменной, ей дается ячейка в памяти, при этом в ней будет хранится мусор
*	int a;
*	std::cout << a; // ошибка компиляции (в старых версиях выведет мусор по типу 2362346)

#endif // Объект

#ifdef Параметры и аргументы функций

* @.'Параметр функции' - это 'переменная, которая используется в функции' и значение
*	которой предоставляет caller (вызывающий объект).
* Пример
*	void printValue(int a) // один параметр типа int
*	{
*		std::cout << a << std::endl;
*	}
* 
* @.'Аргумент функции' - это 'значение', которое передается из caller - a в функцию
*	и которое 'указывается в скобках' при вызове функции в caller - e
* Пример
*	printValue(7); // 7 - аргумент функции printValue()
*
* 'Рекомендации при написании функции'
*	1. Код, который появляется более одного раза в программе, лучше переписать в виде функции.
*	2. Код, который используется для сортировки чего-либо, лучше записать в виде отдельной функции.
*	3. Функция должна выполнять одно задание.
*	4. Когда функция становится слишком большой, сложной или непонятной - её следует разбить на несколько подфункций.
*
* @.'Локальная область видимости' - параметры функции, переменные, которые объявлены внутри функции.
*	Создаются в точке объявления и уничтожаются, когда выходят из области видимости.
* 
* !.'Правило' - Имена, которые используются внутри функции (включая параметры),
*	доступны/видны только внутри этой же функции

#endif // Параметры и аргументы функций

#ifdef Ключевые слова и идентификаторы

* @.'Ключевое слово' - Слова в ЯП (С++), зарезервированные для собственного использования
* Пример
*	auto
*	break
*	char
* @.'Идентификатор' - Имя переменной, функции, класса или другого объекта на языке С++.
* !.'Правила' которые нужно соблюдать:
*	1. Идентификатор не может быть ключевым словом.
*	2. Идентификатор может состоять только из букв, цифр и символов подчёркивания
*	3. Идентификатор должен начинаться с буквы
*	4. С++ различает нижний регистр от верхнего (nvalue не тоже самое что nValue)
* Пример 
*	// корректно (разделяется символом подчёркивания)
*	int my_variable_name;
*	void my_function_name();	
* 
*	// корректно (используется CamelCase "Верблюжий Стиль"
*	int myVariableName;
*	void myFunctionName();
* 
*	// некорректно (пробелы запрещены)
*	int my variable name;
*	void my function name();
* 
*	// работает, но не рекомендуется (следует начинать с буквы в нижнем регистре)
*	int MyVariableName;
*	void MyFunctionName();
* 
* #.'Рекомендации':
*	1. При работе с чужим кодом, придерживайтесь его стиля
*	2. Не начинайте ваши имена с символа подчёркивания, они уже зарезервированы для ОС, библиотеки
*		и используются компилятором
*	3. В качестве идентификаторов используйте те имена, которые реально описывают то, чем является объект
*	4. Уточняющий комментарий всегда будет плюсом (иногда выходит слишком длинное название)
* 
* *'Примечание:' Можно использовать тривиальные имена для переменных,
*		которые имеют тривиальное использование (переменные в цикле, простые математич. функции и тд)

#endif // Ключевые слова и идентификаторы

#ifdef Операторы

* @.'Литерал' - это 'фиксированное значение', которое записывается в исходном коде.
* Пример
*	int a = 3;						// a - это переменная, 3 - литерал
*	std::cout << 5 + 2;				// 5 + 2 - выражение, 5 и 2 - литералы
*	std::cout << "Hello, world!";	// "Hello, world!" - тоже литерал
* 
* @.'Операнд' - это 'данные, с которыми работает выражение'
* 
* @.'Оператор' - это спец. 'символы, работающие с операндом' для получения нового значения.
* 
* @.'Операторы бывают трёх типов'
*	1. Унарные		// -7
*	2. Бинарные		// 5 + 2
*	3. Тернарные	// только один ?:

#endif // Операторы

#ifdef Базовое форматирование кода

* Пробелы, используемые для читабельности кода, также игнорируются компилятором
*	(здесь обойдемся без частных случаев)
* 
* #.'Рекомендации':
*	1. Вместо табуляции ('\t') используйте 4 пробела 
*		(для переноса правильных отступов на другие IDE)
* 
*	2. Фигурные скобки
*		На одном уровне
*			int main()
*			{
*			}
*		Или такой вариант
*			int main() {
*			}
* 
*	3. Каждый стейтмент функции должен быть с соответствующим отступом (tab)
*			int main()
*			{
*				std::cout << "Hello, world!" << std::endl;
*				std::cout << "Nice to meet you." << std::endl;
*			}
* 
*	4. Строки не должны быть слишком длинными (?).
*		До 80 символов - это оптимальный максимум строки
* 
*	5. Если длинная строка разбита на части с помощью оператора, то этот оператор должен находиться
*		в конце этой же строки.
*			std::cout << "This is a really, really, really, really, really, really, really, " <<
*				"really long line" << std::endl;
*			if (condition == "firstName" ||
*				condition == "lastName")
* 
*	6. Используйте пробелы и пропуски строк между стейтментами, для улучшения читабельности вашего кода
*			nConst			= 57;
*			nPricePerItem	= 24;
*			nValue			= 5;
*			nNumberOfItems	= 17;

#endif // Базовое форматирование кода

#ifdef Прототип функции и Предварительное объявление

* *'Проблема:'
* int main() {
*	std::cout << "The sum of 3 and 4 is: " << add(3, 4) << std::endl;
*	return 0;
* }
* 
* int add(int x, int y) {
*	return x + y;
* }
* // add: идентификатор не найден
* // компилятор, находясь в теле main(), еще не знает о функции add(int, int)
* 
* 
* @.'Предварительное объявление' - 'сообщает компилятору о существовании идентификатора' ДО 
*		его фактического определения
* Пример
*	int add(int x, int y) {
*		return x + y;
*	}
* 
*	int main() {
*		std::cout << "The sum of 3 and 4 is: " << add(3, 4) << std::endl;
*		return 0;
*	}
* 
* @.'Прототип функции' - состоит из типа возврата функции, её имени и параметров.
*	В кратком прототипе можно опустить имена параметров функции
* Пример 
*	int add(int, int);	
* 
*	int main() {
*		std::cout << "The sum of 3 and 4 is: " << add(3, 4) << std::endl;
*		return 0;
*	}
* 
*	int add(int x, int y) {
*		return x + y;
*	}
* 
* 
* @.'Определение' - вызывает выделение памяти для идентификатора.
* Пример
*	int add(int x, int y)	// определяем функцию z
*	{
*		int z = x + y;		// определяем переменную z
*		return z;
*	}
* !.'Правила':
*	1. Внутри файла функция/объект/тип/шаблон могут иметь только 'одно определение'
*	2. Внутри программы объект/функция могут иметь только 'одно определение'
*	3. Внутри программы типы/шаблоны функций/встроенные функции могут иметь 'несколько определений',
*		'если' они 'идентичны'
*	Нарушение правила 1 - ошибка компиляции
*	Нарушение правила 2 или 3 - ошибка линкинга
*
* @.'Объявление' - это стейтмент, который сообщает компилятору о существовании идентификатора и о его типе.
* Пример
*	int add(int x, int y);	// объявляем функцию add
*	int x;					// объявляем переменную x
* 
* 'Определение' - это то, что 'обеспечит' корректную работу как 'компилятора', так и 'линкера'
* 'Объявление' - всё, что необходимо 'для' корректной работы 'компилятора', 'но недостаточно для' корректной работы 'линкера'

#endif // Прототип функции и Предварительное объявление

#ifdef Директивы препроцессора

* @.'Препроцессор' - отдельная программа, которая 'выполняется перед компиляцией'.
* При запуске программы, препроцессор просматривает код сверху вниз, файл за файлом, в поиске директив.
* 
* @.'Директивы' - 'специальные команды', которые начинаются с символа '#' и НЕ заканчиваются ';'
* 
* 'Директива #include' - препроцессор 'копирует содержимое подключаемого файла' 
*	в текущий файл сразу после строки с #include
*		Угловые скобки < >
*			Сообщает препроцессору искать файл в 'системных путях'
*			#include <filename>
*		Двойные кавычки " "
*			Сообщает препроцессору искать файл в 'текущей директории проекта'
*			#include "filename"
* 
* 'Директива #define' - используется для создания макросов
* 
* @.'Макрос' - это правило, которое определяет 'конвертацию идентификатора в указанные данные'.
*	Есть два типа макросов
*		'Макросы-функции' ведут себя как функции и используются в тех же целях.
*		'Макросы-объекты' 
*			Пример
*			#define MY_FAVORITE_NUMBER 9	// MY_FAVORITE_NUMBER заменяется числом 9
*			#define USE_YEN					// USE_YEN заменяется пустым местом
* 
* 'Директива условной компиляции'
*	#ifdef		// Было ли определено с помощью #define?
*	#ifndef		// Было ли НЕ определено с помощью #define?
*	#endif		// Конец условной компиляции
* Пример ('Header Guards')
*	@.'Header Guards'
*	Часто используется в '.h' файлах, для предотвращения копирования одного и того же файла.
*		#ifndef SOME_UNIQUE_NAME_HERE
*		#define SOME_UNIQUE_NAME_HERE
*
*		// Основная часть кода
* 
*		#endif
* 
*	#pragma once - альтернатива примеру выше, короче и менее подвержена ошибкам.
*		НО, не является официальной частью языка С++ и не все компиляторы её поддерживают.
*		Поэтому рекомендуется использовать Header Guards (?)

#endif // Директивы препроцессора

#ifdef Конфликт имен и std namespace

* Большинство конфликтов имен происходят в двух случаях:
*	1. Файлы добавленные в один проект, имею функцию с одинаковыми именами (линкинг)
*	2. Файл .cpp подключает заголовочный файл, в котором идентификатор конфликтует с 
*		идентификатором из файла .cpp (компиляция)
* 
* Весь функционал Стандартной библиотеки С++ определен внутри пространства имен std (сокр. от "standart)
* 
* @.'Оператор разрешения области видимости ::' - способ сообщить компилятору, что идентификатор находится в 
*	определенном пространстве имен.
* Пример
*	// Сообщаем, что хотим использовать cout из пространства имен std
*	std::cout << "Hello, world!";

#endif // Конфликт имен и std namespace

#ifdef Разработка ваших первых программ

* Шаг №1: 'Определите проблему'
*	Сформулировать проблему, которая решит ваша задача.
*	Пример
*		Я хочу написать программу-справочник для удобного хранения и редактирования
*			всех телефонных номеров и звонков.
* 
* Шаг №2: 'Определите свой инструментарий, цели и план бэкапа'
*	Для опытных будет не мало дополнительных пунктов:
*		Какая ваша целевая аудитория и какие у нее потребности?
*		На какой архитектуре/ОС ваша программа будет работать?
*		Какой инструментарий вы будете использовать?
*		Будете ли вы разрабатывать программу в одиночку или в составе команды?
*		Анализ требований.
*		Определение стратегий тестирования/обратной связи/релиза.
*		Создание плана бэкапа в случае неожиданных проблем.
* 
* Шаг №3: 'Разбейте проблему на части'
*	Любое сложное — это совокупность множества простого.
*	Задача: 
*		Написать доклад о картошке
*	Разделим на подзадачи:
*		Написать доклад о картошке
*			Поиск информации о картошке
*			Создание плана
*			Заполнение каждого пункта плана подробной информацией
*			Заключение
*	Звучит всё еще расплывчато - разобьем подпункты:
*		Написать доклад о картошке
*			Поиск информации о картошке
*				Сходить в библиотеку за книжками о картошке
*				Поискать информацию в Интернете
*				Делать заметки в соответствующих разделах из справочного материала
*			Создание плана
*				Информация о выращивании
*				Информация об обработке
*				Информация об удобрениях
*			Заполнение каждого пункта плана подробной информацией
*			Заключение
* 
* Шаг №4: 'Определите последовательность событий'
*	Надо определить, как связать все пункты вместе.
*	Также стоит учесть, что для выполнения одной задачи, может потребоваться выполнение другой.
* 
* Шаг №5: 'Определите данные ввода и данные вывода на каждом этапе'
* Шаг №6: 'Позаботьтесь о деталях'
* Шаг №7: 'Соедините данные ввода с данными вывода в программе'

#endif // Разработка ваших первых программ

#ifdef Отладка программ

* Типы ошибок
*	@.'Синтаксическая ошибка' - когда вы пишете код, которые не соответствует правилам грамматики ЯП С++
*	@.'Семантическая ошибка' - когда код синтаксически правильные, но делает не то, что задумал программист
* 
* @.'Отладчик'/'Дебаггер' - программа, которая позволяет программисту 'контролировать выполнение кода'.
*	Например, для выполнения программы пошагово, последовательно изучая значения переменных в программе.
* 
* 'Примечание:' убедитесь, что вы находитесь в режиме конфигурации Debug
* 
* @.'Степпинг' - возможность отладчика выполнять код пошагово (строка за строкой).
*	Есть три команды степпинга:
*		'Шаг с заходом'							| F11
*		'Шаг с обходом'							| F10
*		'Шаг с выходом'							| shift + F11
* 
* Команда "Выполнить до текущей позиции"		| ПКМ по строке и Выполнить до текущей позиции
*	Выполнит весь код до строки, обозначенной курсором.					
* 
* Команда "Продолжить"							| F5
*	Продолжит выполнение до конца программы или до следующей контрольной точки.
* 
* @.'Точка останова' - 'специальные маркеры',	| ЛКМ по свободной зоне слева от номера строки
*	на которых отладчик 'останавливает процесс выполнения' программы.
* 
* @.'Отслеживание переменных' - это процесс проверки значений переменных во время отладки.
* @.'Стек вызовов' - это список всех активныхз функций, которые вызывались до текущего местоположения.
*	'Отладка'	->	'Окна'	->	'Стек вызовов'

#endif // Отладка программ

#ifdef Итоговый тест №1

* 'Задание 1'
* Напишите однофайловую программу (с именем main.cpp), которая запрашивает у
*	пользователя два целых числа, складывает их, а затем выводит результат. В
*	программе должно быть 3 функции:
*		1. функция readNumber(), которая запрашивает у пользователя целое число, а
*			затем возвращает его в main();
*		2. функция writeAnswer(), которая выводит результат на экран. Функция должна
*			быть без возвращаемого значения и иметь только один параметр;
*		3. функция main(), которая соединяет всё и вся.
* 
* 'Задание 2'
* Измените программу из задания №1 так, чтобы функции readNumber() и
*	writeAnswer() находились в отдельном файле io.cpp. Используйте предварительные
*	объявления для доступа к этим функциям с функции main().
* 
* 'Задание 3'
* Измените программу из задания №2 так, чтобы она использовала заголовочный
*	файл io.h для доступа к функциям (вместо использования предварительных
*	объявлений). Убедитесь, что ваш заголовочный файл использует header guards.
* 
* 
* 'Решение:'
*	смотреть "io.h", "io.cpp"
*		#include "io.h"
*		int main() {
*			int a = readNumber();
*			int b = readNumber();
*			writeAnswer(a + b);
*		}

#endif // Итоговый тест №1


#include "io.h"

int main() {
	int a = readNumber();
	int b = readNumber();
	writeAnswer(a + b);
}