#ifdef Различные задачи

* 'Указатели на функции:'
* 'Задание №1'
*  В этот раз мы попытаемся написать версию базового калькулятора с помощью
*   указателей на функции.
* 
*   a) Напишите короткую программу, которая просит пользователя ввести два целых
*       числа и выбрать математическую операцию: +, -, * или /. Убедитесь, что
*        пользователь ввел корректный символ математической операции (используйте
*        проверку).
* 
*   b) Напишите функции add(), subtract(), multiply() и divide(). Они должны принимать
*        два целочисленных параметра и возвращать целочисленное значение.
* 
*   c) Создайте typedef с именем arithmeticFcn для указателя на функцию, которая
*        принимает два целочисленных параметра и возвращает целочисленное значение.
* 
*   d) Напишите функцию с именем getArithmeticFcn(), которая принимает символ
*        выбранного математического оператора и возвращает соответствующую функцию в
*        качестве указателя на функцию.
* 
*   e) Добавьте в функцию main() вызов функции getArithmeticFcn().
* 
* 
* 'Задание №2'
* Теперь давайте изменим программу, которую мы написали в первом задании,
*   чтобы переместить логику из getArithmeticFcn в массив.
*  
*   a) Создайте структуру с именем arithmeticStruct, которая имеет два члена:
*       математический оператор типа char и указатель на функцию arithmeticFcn.
* 
*   b) Создайте статический глобальный массив arithmeticArray, используя
*       структуру arithmeticStruct, который будет инициализирован каждой из 4
*       математических операций.
* 
*   c) Измените getArithmeticFcn для выполнения цикла по массиву и возврата
*       соответствующего указателя на функцию.
* 
* Решение:
* #include <iostream>
* #include "function_ptr.h"
*
* int main() {
*	std::cout << "Enter num#1: ";
*	int a = getNumber();
*	std::cout << "Enter num#2: ";
*	int b = getNumber();
*	std::cout << "Choise operation (+, -, * or /): ";
*	char operation = getSymbol(isCalculateOperation);
*
*	arithmeticFcn getResult = getArithmeticFcn(operation);
*	std::cout << getResult(a, b);
* }

#endif // Различные задачи
